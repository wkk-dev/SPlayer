class BlobURLManager {
  private blobURLs: Map<string, string>;

  constructor() {
    this.blobURLs = new Map();
  }

  /**
   * ‰ªéÁªôÂÆöÁöÑ Buffer Êï∞ÊçÆÁîüÊàê Blob URL
   * @param data - Ë¶ÅËΩ¨Êç¢‰∏∫ Blob ÁöÑ‰∫åËøõÂà∂Êï∞ÊçÆ
   * @param format - Êï∞ÊçÆÁöÑ MIME Á±ªÂûãÔºà'image/jpeg'Ôºâ
   * @param key - Áî®‰∫éÊ†áËØÜ Blob URL ÁöÑÂîØ‰∏ÄÈîÆÔºàÊñá‰ª∂Ë∑ØÂæÑÔºâ
   * @returns Blob URL
   */
  createBlobURL(data: Buffer, format: string, key: string): string {
    try {
      if (this.blobURLs.has(key)) {
        // console.log("üå± Blob URL already exists:", key);
        return this.blobURLs.get(key)!;
      }
      const blob = new Blob([data], { type: format });
      const blobURL = URL.createObjectURL(blob);
      // Â≠òÂÇ® Blob URL
      this.blobURLs.set(key, blobURL);
      return blobURL;
    } catch (error) {
      console.error("‚ùå Error creating Blob URL:", error);
      throw error;
    }
  }

  /**
   * Ê∏ÖÁêÜ Blob URL
   * @param key - Ë¶ÅÊ∏ÖÁêÜÁöÑ Blob URL ÂØπÂ∫îÁöÑÈîÆ
   */
  revokeBlobURL(key: string): void {
    try {
      const blobURL = this.blobURLs.get(key);
      if (blobURL) {
        URL.revokeObjectURL(blobURL);
        this.blobURLs.delete(key);
      }
    } catch (error) {
      console.error("‚ùå Error revoking Blob URL:", error);
    }
  }

  /**
   * Ê∏ÖÁêÜÊâÄÊúâ Blob URL
   */
  revokeAllBlobURLs(): void {
    try {
      this.blobURLs.forEach((blobURL) => {
        URL.revokeObjectURL(blobURL);
      });
      // Ê∏ÖÁ©∫Â≠òÂÇ®
      this.blobURLs.clear();
    } catch (error) {
      console.error("‚ùå Error revoking all Blob URLs:", error);
    }
  }
}

export default new BlobURLManager();
